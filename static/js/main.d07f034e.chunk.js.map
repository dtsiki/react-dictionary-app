{"version":3,"sources":["components/base/Header/Header.js","components/base/Layout/Layout.js","components/base/Message/Message.js","components/base/Spinner/Spinner.js","components/base/ScrollWrapper/ScrollWrapper.js","components/dictionary/Faved/Faved.js","hooks/useOnClickOutside.js","components/dictionary/Overlay/Overlay.js","components/base/Input/Input.js","components/dictionary/SearchForm/SearchForm.js","components/dictionary/Word/Word.js","services/dictionary/dictionary.js","App.js","store/index.js","index.js"],"names":["Header","handleFaved","className","onClick","icon","faBookmark","size","color","Layout","children","isBackdrop","Message","title","text","Spinner","isVisible","ScrollWrapper","style","maxHeight","height","width","Faved","ref","useRef","useStoreon","words","dispatch","handler","useEffect","listener","event","current","contains","target","document","addEventListener","removeEventListener","useOnClickOutside","wordsList","useMemo","map","word","value","definitions","key","removeWord","faTrash","definition","faArrowLeft","length","Overlay","useState","background","setBackground","backgroundImage","Input","wrapperClassName","inputClassName","labelClassName","type","id","onChange","placeholder","name","label","htmlFor","SearchForm","searchWord","changeWord","placeholderWords","getPlaceholder","useCallback","Math","floor","random","onSubmit","Word","phonetic","toggleWord","showAllDefinitions","setShowAllDefinitions","isFaved","setIsFaved","isInitialized","setIsInitialized","values","indexOf","renderDefinitions","index","faHeart","getDefinitionByWord","a","fetch","then","response","json","App","searchValue","setSearchValue","error","setError","isFavedOpened","showFaved","setWord","isWordLoaded","isFirstLoading","isWordChanged","isFailed","status","setStatus","fetchDefinition","data","Array","isArray","prevWord","meanings","prevStatus","isLoaded","isLoading","e","preventDefault","message","store","createStoreon","on","newWord","concat","filter","item","persistState","ReactDOM","render","StrictMode","Provider","getElementById"],"mappings":"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","file":"static/js/main.d07f034e.chunk.js","sourcesContent":["import { faBookmark } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nimport './style.scss';\n\nconst Header = ({ handleFaved }) => {\n  return (\n    <div className=\"header\">\n      <h1 className=\"header__title\">Dictionary</h1>\n      <button className=\"button header__button\" onClick={handleFaved}>\n        <FontAwesomeIcon icon={faBookmark} size=\"2x\" color=\"#ffffff\" />\n        <span className=\"visually-hidden\">Show saved</span>\n      </button>\n    </div>\n  );\n};\n\nHeader.propTypes = {\n  handleFaved: PropTypes.func,\n};\n\nexport default Header;\n","import PropTypes from 'prop-types';\nimport React from 'react';\n\nimport './style.scss';\n\nconst Layout = ({ children, isBackdrop }) => {\n  return (\n    <div className={`layout${isBackdrop ? ' layout--backdrop' : ''}`}>\n      <div className=\"layout__content\">{children}</div>\n    </div>\n  );\n};\n\nLayout.propTypes = {\n  children: PropTypes.node,\n  isBackdrop: PropTypes.bool,\n};\n\nexport default Layout;\n","import PropTypes from 'prop-types';\nimport React from 'react';\n\nimport './style.scss';\n\nconst Message = ({ title, text }) => {\n  return (\n    <div className=\"message\">\n      {title && <h3 className=\"message__title\">{title}</h3>}\n      {text && <h4 className=\"message__text\">{text}</h4>}\n    </div>\n  );\n};\n\nMessage.propTypes = {\n  title: PropTypes.string,\n  text: PropTypes.string,\n};\n\nexport default Message;\n","import PropTypes from 'prop-types';\nimport React from 'react';\n\nimport './style.scss';\n\nconst Spinner = ({ size = 'medium', isVisible }) => {\n  if (!isVisible) {\n    return <></>;\n  }\n\n  return (\n    <div className={`spinner spinner--${size}`}>\n      <div className=\"spinner__wrapper\">\n        <span className=\"spinner__label\">Loading</span>\n      </div>\n    </div>\n  );\n};\n\nSpinner.propTypes = {\n  size: PropTypes.string,\n  isVisible: PropTypes.bool,\n};\n\nexport default Spinner;\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport SimpleBar from 'simplebar-react';\n\nimport 'simplebar/dist/simplebar.min.css';\nimport './style.scss';\n\nconst ScrollWrapper = ({ children }) => {\n  const options = {\n    style: {\n      maxHeight: 400,\n      height: '100%',\n      width: '100%',\n    },\n  };\n\n  return (\n    <SimpleBar {...options} className=\"scroll-wrapper\">\n      {children}\n    </SimpleBar>\n  );\n};\n\nScrollWrapper.propTypes = {\n  children: PropTypes.node,\n};\n\nexport default ScrollWrapper;\n","import { faArrowLeft, faTrash } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport PropTypes from 'prop-types';\nimport React, { useMemo, useRef } from 'react';\nimport { useStoreon } from 'storeon/react';\n\nimport { useOnClickOutside } from '../../../hooks/useOnClickOutside';\nimport ScrollWrapper from './../../base/ScrollWrapper';\n\nimport './style.scss';\n\nconst Faved = ({ handleFaved }) => {\n  const ref = useRef();\n  const { words, dispatch } = useStoreon('words');\n\n  const removeWord = (word) => {\n    dispatch('words/delete', word);\n  };\n\n  useOnClickOutside(ref, () => handleFaved(false));\n\n  const wordsList = useMemo(() => {\n    return words.map((word) => {\n      const { value, definitions } = word;\n\n      return (\n        <li key={value} className=\"faved__item\">\n          <div className=\"faved__word\">\n            <h3 className=\"faved__value\">{value}</h3>\n            <button className=\"faved__button faved__button--remove\" onClick={() => removeWord(word)}>\n              <FontAwesomeIcon icon={faTrash} />\n              <span className=\"visually-hidden\">Remove from faved</span>\n            </button>\n          </div>\n          {definitions && <p className=\"faved__definition\">{definitions[0].definition}</p>}\n        </li>\n      );\n    });\n  }, [words]);\n\n  return (\n    <div className=\"faved faved--active\">\n      <div ref={ref} className=\"faved__wrapper\">\n        <div className=\"faved__heading\">\n          <div className=\"faved__main\">\n            <button className=\"faved__button\" onClick={handleFaved}>\n              <FontAwesomeIcon icon={faArrowLeft} size=\"2x\" />\n              <span className=\"visually-hidden\">Close faved</span>\n            </button>\n            <h2 className=\"faved__title\">Faved</h2>\n          </div>\n        </div>\n        <div className=\"faved__content\">\n          {words.length > 0 ? (\n            <ScrollWrapper>\n              <ul className=\"faved__list\">{wordsList}</ul>\n            </ScrollWrapper>\n          ) : (\n            <div className=\"faved__message\">You have not yet save any word.</div>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nFaved.propTypes = {\n  handleFaved: PropTypes.func,\n};\n\nexport default Faved;\n","import { useEffect } from 'react';\n\nexport const useOnClickOutside = (ref, handler) => {\n  useEffect(() => {\n    const listener = (event) => {\n      if (!ref.current || ref.current.contains(event.target)) {\n        return;\n      }\n\n      handler(event);\n    };\n\n    document.addEventListener('mousedown', listener);\n    document.addEventListener('touchstart', listener);\n\n    return () => {\n      document.removeEventListener('mousedown', listener);\n      document.removeEventListener('touchstart', listener);\n    };\n  }, [ref, handler]);\n};\n","import PropTypes from 'prop-types';\nimport React, { useEffect, useState } from 'react';\n\nimport './style.scss';\n\nconst Overlay = ({ word }) => {\n  const [background, setBackground] = useState('');\n\n  useEffect(() => {\n    const endpoint = 'https://source.unsplash.com/1600x900';\n\n    setBackground(`${endpoint}/?${word}`);\n  }, [word]);\n\n  return <div className=\"overlay\" style={{ backgroundImage: `url(\"${background}\")` }} />;\n};\n\nOverlay.propTypes = {\n  word: PropTypes.string,\n};\n\nexport default Overlay;\n","import PropTypes from 'prop-types';\nimport React from 'react';\n\nimport './style.scss';\n\nconst Input = ({\n  wrapperClassName,\n  inputClassName,\n  labelClassName,\n  type,\n  id,\n  value,\n  onChange,\n  placeholder,\n  name,\n  label,\n}) => {\n  return (\n    <div className={`input${wrapperClassName ? ` ${wrapperClassName}` : ''}`}>\n      <label className={`input__label${labelClassName ? ` ${labelClassName}` : ''}`} htmlFor={id}>\n        {label}\n      </label>\n      <input\n        className={`input__field${inputClassName ? ` ${inputClassName}` : ''}`}\n        type={type}\n        name={name}\n        id={id}\n        placeholder={placeholder}\n        value={value}\n        onChange={onChange}\n      />\n    </div>\n  );\n};\n\nInput.propTypes = {\n  value: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),\n  onChange: PropTypes.func,\n  placeholder: PropTypes.string,\n  name: PropTypes.string,\n  id: PropTypes.string,\n  type: PropTypes.string,\n  label: PropTypes.string,\n  inputClassName: PropTypes.string,\n  wrapperClassName: PropTypes.string,\n  labelClassName: PropTypes.string,\n};\n\nexport default Input;\n","import PropTypes from 'prop-types';\nimport React, { useCallback } from 'react';\n\nimport Input from '../../base/Input/Input';\n\nimport './style.scss';\n\nconst SearchForm = ({ searchWord, changeWord, word }) => {\n  const placeholderWords = ['croissant', 'yay', 'corgi', 'waterlemon', 'mountain', 'rainbow', 'cat', 'ocean'];\n\n  const getPlaceholder = useCallback(() => {\n    const word = placeholderWords[Math.floor(Math.random() * placeholderWords.length)];\n\n    return `Example: ${word}`;\n  }, [placeholderWords]);\n\n  return (\n    <form onSubmit={searchWord} className=\"form\">\n      <Input\n        value={word}\n        onChange={changeWord}\n        type=\"search\"\n        name=\"city\"\n        id=\"city\"\n        placeholder={getPlaceholder()}\n        label=\"Search word\"\n        inputClassName=\"form__input\"\n        labelClassName=\"form__label\"\n      />\n      <button className=\"form__button\">Search</button>\n    </form>\n  );\n};\n\nSearchForm.propTypes = {\n  word: PropTypes.string,\n  searchWord: PropTypes.func,\n  changeWord: PropTypes.func,\n};\n\nexport default SearchForm;\n","import { faHeart } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport PropTypes from 'prop-types';\nimport React, { useEffect, useMemo, useState } from 'react';\nimport { useStoreon } from 'storeon/react';\n\nimport Spinner from '../../base/Spinner';\n\nimport './style.scss';\n\nconst Word = ({ word, phonetic, definitions, toggleWord }) => {\n  const { words } = useStoreon('words');\n  const [showAllDefinitions, setShowAllDefinitions] = useState(false);\n  const [isFaved, setIsFaved] = useState(false);\n  const [isInitialized, setIsInitialized] = useState(false);\n\n  const toggleDefinitions = () => {\n    setShowAllDefinitions(!showAllDefinitions);\n  };\n\n  useEffect(() => {\n    const values = words.map((word) => word.value);\n\n    setIsFaved(values.indexOf(word) >= 0);\n    setIsInitialized(true);\n  }, [words, word]);\n\n  const renderDefinitions = useMemo(() => {\n    return definitions?.map((definition, index) => {\n      const showOnlyFirstDefinition = !showAllDefinitions && index === 0;\n\n      if (showOnlyFirstDefinition || showAllDefinitions) {\n        return (\n          <li className=\"word__definition\" key={definition.definition}>\n            {definitions.length !== 1 && <span>{index + 1}.</span>} {definition.definition}\n          </li>\n        );\n      }\n    });\n  }, [definitions, showAllDefinitions]);\n\n  return (\n    <>\n      {isInitialized ? (\n        <div className=\"word\">\n          <div className=\"word__heading\">\n            <h2 className=\"word__title\">{word}</h2>\n            <button onClick={toggleWord} className={`button word__toggle ${isFaved ? ' is-faved' : 'is-not-faved'}`}>\n              <span className=\"visually-hidden\">Save</span>\n              <span className=\"word__icon\">\n                <FontAwesomeIcon icon={faHeart} size=\"2x\" color=\"#ffffff\" />\n              </span>\n            </button>\n          </div>\n          <h3 className=\"word__phonetic\">/{phonetic}/</h3>\n          <ul className=\"word__definitions\">{renderDefinitions}</ul>\n          {definitions?.length > 1 && (\n            <button onClick={toggleDefinitions} className=\"button word__button\">\n              {showAllDefinitions ? 'Show less' : 'Show all definitions'}\n            </button>\n          )}\n        </div>\n      ) : (\n        <div className=\"layout__spinner\">\n          <Spinner />\n        </div>\n      )}\n    </>\n  );\n};\n\nWord.propTypes = {\n  word: PropTypes.string,\n  phonetic: PropTypes.string,\n  definitions: PropTypes.array,\n  toggleWord: PropTypes.func,\n};\n\nexport default Word;\n","export const getDefinitionByWord = async (word) => {\n  const dictionaryEndpoint = ' https://api.dictionaryapi.dev/api/v2/entries/en';\n\n  return await fetch(`${dictionaryEndpoint}/${word}`).then((response) => {\n    return response.json();\n  });\n};\n","import React, { useCallback, useEffect, useState } from 'react';\nimport { useStoreon } from 'storeon/react';\n\nimport Header from './components/base/Header/Header';\nimport Layout from './components/base/Layout';\nimport Message from './components/base/Message';\nimport Spinner from './components/base/Spinner';\nimport Faved from './components/dictionary/Faved';\nimport Overlay from './components/dictionary/Overlay/Overlay';\nimport SearchForm from './components/dictionary/SearchForm';\nimport Word from './components/dictionary/Word';\nimport { getDefinitionByWord } from './services/dictionary';\n\nconst App = () => {\n  const { dispatch, words } = useStoreon('words');\n  const [searchValue, setSearchValue] = useState('');\n  const [error, setError] = useState(null);\n  const [isFavedOpened, showFaved] = useState(false);\n  const [word, setWord] = useState({\n    value: '',\n    phonetic: '',\n    definitions: '',\n  });\n  const [status, setStatus] = useState({\n    isWordLoaded: false,\n    isFirstLoading: true,\n    isWordChanged: false,\n    isFailed: false,\n  });\n\n  useEffect(() => {\n    const fetchDefinition = async () => {\n      const data = await getDefinitionByWord(word.value);\n\n      if (!Array.isArray(data)) {\n        setError(data);\n        setStatus((prevStatus) => ({\n          ...prevStatus,\n          isFailed: true,\n        }));\n      } else {\n        setWord((prevWord) => ({\n          ...prevWord,\n          phonetic: data[0].phonetic,\n          definitions: data[0].meanings[0].definitions,\n        }));\n        setStatus((prevStatus) => ({\n          ...prevStatus,\n          isFailed: false,\n        }));\n      }\n\n      setStatus((prevStatus) => ({\n        ...prevStatus,\n        isLoaded: true,\n        isLoading: false,\n        isFirstLoading: false,\n      }));\n    };\n\n    if (status.isLoading) fetchDefinition();\n  }, [status.isLoading, word.value]);\n\n  const changeWord = useCallback((e) => {\n    const value = e.target.value;\n\n    setSearchValue(value);\n  }, []);\n\n  const searchWord = useCallback(\n    (e) => {\n      e.preventDefault();\n\n      if (!searchValue) return;\n\n      setWord((prevWord) => ({\n        ...prevWord,\n        value: searchValue,\n      }));\n\n      setStatus((prevStatus) => ({\n        ...prevStatus,\n        isLoading: true,\n      }));\n    },\n    [searchValue]\n  );\n\n  const toggleWord = () => {\n    const values = words.map((word) => word.value);\n\n    if (word.value) {\n      if (values.indexOf(word.value) >= 0) {\n        dispatch('words/delete', word);\n      } else {\n        dispatch('words/add', word);\n      }\n    }\n  };\n\n  const showSaved = () => {\n    showFaved(!isFavedOpened);\n  };\n\n  return (\n    <>\n      {isFavedOpened && <Faved handleFaved={showSaved} />}\n      <Layout isBackdrop={isFavedOpened}>\n        <Header handleFaved={showFaved} />\n        <SearchForm word={searchValue} searchWord={searchWord} changeWord={changeWord} />\n        <Spinner isVisible={status.isLoading} />\n        {status.isLoaded && !status.isFailed && !status.isLoading && (\n          <Word word={word.value} phonetic={word.phonetic} definitions={word.definitions} toggleWord={toggleWord} />\n        )}\n        {status.isFirstLoading && !status.isLoading && (\n          <Message text=\"Enter any word in the input above to get word definition.\" />\n        )}\n        {status.isFailed && <Message title={error.title} text={error.message} />}\n        {status.isLoaded && <Overlay word={word.value} />}\n      </Layout>\n    </>\n  );\n};\n\nexport default App;\n","import { persistState } from '@storeon/localstorage';\nimport { createStoreon } from 'storeon';\n\nconst words = (store) => {\n  store.on('@init', () => ({ words: [] }));\n\n  store.on('words/add', ({ words }, newWord) => {\n    return {\n      words: words.concat([newWord]),\n    };\n  });\n\n  store.on('words/delete', ({ words }, word) => {\n    const updatedWords = words.filter((item) => {\n      return item !== word;\n    });\n\n    return {\n      words: updatedWords,\n    };\n  });\n\n  store.on('words/deleteAll', () => {\n    return {\n      words: [],\n    };\n  });\n};\n\nexport const store = createStoreon([words, persistState(['words'])]);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { StoreContext } from 'storeon/react';\n\nimport App from './App';\nimport { store } from './store';\n\nimport './styles/main.scss';\n\nReactDOM.render(\n  <React.StrictMode>\n    <StoreContext.Provider value={store}>\n      <App />\n    </StoreContext.Provider>\n  </React.StrictMode>,\n  document.getElementById('app')\n);\n"],"sourceRoot":""}